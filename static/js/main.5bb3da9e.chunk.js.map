{"version":3,"sources":["components/ImageResults.jsx","components/Search.js","App.js","reportWebVitals.js","index.js"],"names":["ImageResults","state","open","currentImg","imageList","images","this","props","GridList","cols","map","img","src","largeImageURL","className","alt","Component","propsTypes","PropTypes","array","isRequired","Search","searchText","apiUrl","apiKey","apiFlickerurl","inputEvent","e","setState","target","name","value","axios","get","then","res","data","hits","catch","err","console","log","type","placeholder","onChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"qPAIMA,E,4MACFC,MAAQ,CACJC,MAAM,EACNC,WAAY,I,4CAEhB,WACI,IAAIC,EACIC,EAAWC,KAAKC,MAAhBF,OAgBR,OAbID,EADAC,EAEI,cAACG,EAAA,SAAD,CAAUC,KAAM,EAAhB,SACKJ,EAAOK,KAAI,SAAAC,GAAG,OACX,cAAC,WAAD,UAEI,qBAAKC,IAAKD,EAAIE,cAAeC,UAAU,SAASC,IAAI,YAMxD,KAGZ,mCACI,qBAAKD,UAAU,SAAf,SACI,qBAAKA,UAAU,SAAf,SACKV,Y,GA3BEY,aAkC3BhB,EAAaiB,WAAa,CACtBZ,OAAQa,IAAUC,MAAMC,YAGbpB,Q,0BCAAqB,E,4MApCbpB,MAAQ,CACNqB,WAAY,GACZC,OAAQ,0BACRC,OAAQ,qCACRnB,OAAQ,GACRoB,cAAe,uL,EAEjBC,WAAa,SAACC,GACZ,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,QAAS,WACjDC,IACGC,IADH,UAEO,EAAKhC,MAAMsB,OAFlB,iBAEiC,EAAKtB,MAAMuB,OAF5C,cAEwD,EAAKvB,MAAMqB,WAFnE,sBAIIY,MAAK,SAAAC,GAAG,OAAI,EAAKP,SAAS,CAAEvB,OAAQ8B,EAAIC,KAAKC,UAC9CC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,U,4CAIhC,WAEE,OADAC,QAAQC,IAAInC,KAAKL,MAAMI,QAErB,qCACE,sBAAKS,UAAU,YAAf,UACE,+CACA,uBAAO4B,KAAK,OAAOC,YAAY,eAC7BZ,MAAOzB,KAAKL,MAAMqB,WAAYQ,KAAK,aACnCc,SAAUtC,KAAKoB,gBAEnB,uBAGA,cAAC,EAAD,CAAcrB,OAAQC,KAAKL,MAAMI,gB,GAhCpBW,a,iBCON6B,EARH,WACR,OACI,cAAC,IAAD,UACG,cAAC,EAAD,OCKIC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.5bb3da9e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { GridList, GridTile } from 'material-ui/GridList';\r\n\r\nclass ImageResults extends Component {\r\n    state = {\r\n        open: false,\r\n        currentImg: ''\r\n    }\r\n    render() {\r\n        let imageList;\r\n        const { images } = this.props\r\n\r\n        if (images) {\r\n            imageList = (\r\n                <GridList cols={4}>\r\n                    {images.map(img => (\r\n                        <GridTile>\r\n                            \r\n                            <img src={img.largeImageURL} className=\"shadow\" alt=\"\" />\r\n                        </GridTile>\r\n                    ))}\r\n                </GridList>\r\n            )\r\n        } else {\r\n            imageList = null;\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"shadow\">\r\n                    <div className=\"center\">\r\n                        {imageList}\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\nImageResults.propsTypes = {\r\n    images: PropTypes.array.isRequired\r\n}\r\n\r\nexport default ImageResults;","import React, { Component } from 'react';\nimport ImageResults from './ImageResults';\nimport './../App.css';\nimport axios from 'axios';\n\nclass Search extends Component {\n  state = {\n    searchText: \"\",\n    apiUrl: 'https://pixabay.com/api',\n    apiKey: '22509623-77592e591df034b0b8bcf7773',\n    images: [],\n    apiFlickerurl: 'https://www.flickr.com/services/rest/?method=flickr.photos.getRecent&api_key=a52af3e4cbb20ae41cf953f426ad26cd&format=json&nojsoncallback=1&api_sig=a0d44ce8ffd35e5c3af7ad16c118000a',\n  };\n  inputEvent = (e) => {\n    this.setState({ [e.target.name]: e.target.value }, () => {\n      axios\n        .get(\n          `${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo`\n          // `${this.state.apiFlickerurl}`\n        ).then(res => this.setState({ images: res.data.hits }))\n        .catch(err => console.log(err));\n    });\n  };\n\n  render() {\n    console.log(this.state.images);\n    return (\n      <>\n        <div className=\"searchbar\">\n          <h1>Search Photos</h1>\n          <input type=\"text\" placeholder=\"type here...\"\n            value={this.state.searchText} name=\"searchText\"\n            onChange={this.inputEvent} />\n        </div>\n        <br />\n        {/* <div className=\"result\"> {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null} </div> */}\n        {/* <ImageResults images={this.state.images} /> */}\n        <ImageResults images={this.state.images} />\n      </>\n    )\n  }\n}\nexport default Search;\n","import React from 'react';\r\nimport Search from './components/Search';\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\n\r\nconst App = () => {\r\n    return (\r\n        <MuiThemeProvider>\r\n           <Search />\r\n        </MuiThemeProvider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}